# Birdscanner v2
# Last modified: ons sep 09, 2020  06:03
# Sign: JN

# Input files
GENOMES, = glob_wildcards("data/genomes/{genome}.gz")
REFERENCES, = glob_wildcards("data/references/{ref}.fas")

# Function for providing list of reference files
def convert_input(wildcards):
    files = expand("data/references/{ref}.fas", ref=REFERENCES)
    return files

# 0. First rule
rule all:
    """
    TODO: Figure out which lines that should be kept
    """
    input:
        expand("results/genomes/{genome}", genome=GENOMES),
        expand("results/hmmer/{genome}.hmmer.out.gz", genome=GENOMES),
        "run/tmp/genes.done"

# 1. Convert fasta
# Uses: bash 5.0.17, awk 5.0.1
rule OO1_convert_fas:
    """
    Relabel fasta headers to '>filename__i', where i is an iterator. The '__' is important and used later in rule get_reference_ids.
    """
    input:
        "data/references/{ref}.fas"
    output:
        temp("run/tmp/{ref}.fasta")
    shell:
        "awk -v a=$(basename {input} .fas) '/>/{{$0=\">\"a\"__\"++i}}1' {input} > {output}"

# 2. cat_reference_fas
# Uses: bash 5.0.17, find 4.7.0
rule OO2_cat_reference_fas:
    """
    Concatenate all reference fasta files to one (reference.fas).
    """
    input:
        expand("run/tmp/{ref}.fasta", ref=REFERENCES)
    output:
        temp("run/tmp/reference.fas")
    shell:
        "find run/tmp -type f -name \*.fasta -exec cat {{}} \+ > {output}"

# 3. split_genome_fasta
# Uses: bash 5.0.17, splitfast 1.0, pigz v2.4
rule OO3_split_genome_fasta:
    """
    Split fasta sequences longer than length=100,000. Note that 100,000 is the maximum length for plast.
    """
    input: 
        "data/genomes/{genome}.gz"
    output: 
        temp("run/plast/{genome}.split.fas")
    threads:
        workflow.cores * 0.5
    params:
        length = "100000"
    shell:
        "splitfast -m {params.length} <(pigz -p {threads} -d -c {input}) > {output}"

# 4. make_genome_plast_db
# Uses: bash 5.0.17, makeblastdb v2.9.0+ from blast v2.9.0
rule OO4_make_genome_plast_db:
    """
    Make plast database.
    """
    input:
        "run/plast/{genome}.split.fas",
    output:
        temp(touch("run/tmp/{genome}.makeblastdb.done"))
    params:
        dbtype = "nucl",
        parse_seqids = "-parse_seqids"
    shell:
        "makeblastdb -in {input} -dbtype {params.dbtype} {params.parse_seqids}"

# 5. run_plast
# Uses: bash 5.0.17, plast v2.3.2
rule OO5_run_plast:
    """
    Run plast with all concatenated reference sequences as query,
    and the splitted genome fasta as data base.
    """
    input:
        db_done = "run/tmp/{genome}.makeblastdb.done",
        query = "run/tmp/reference.fas"
    output:
        temp("run/plast/{genome}.plast.tab")
    threads:
        workflow.cores
    params:
        maxhitperquery = "1",
        bargraph = "-bargraph"
    shell:
        "plast -p plastn -i {input.query} -d run/plast/{wildcards.genome}.split.fas -o {output} -a {threads} -max-hit-per-query {params.maxhitperquery} {params.bargraph}"

# 6. get_scaffold_ids
# Uses: bash 5.0.17, awk v5.0.1, sort v8.30
rule OO6_get_scaffold_ids:
    """
    The idea is that for each species, we would expect one best hit, and we wish to see which of the scaffolds that most often provides the best hit.
    We wish to search with hmms only against the scaffolds having sufficiently long hits in the plast search.
    Plast outfmt 1:
    query ID, subject ID, percent identities, alignment length, nb. misses, nb. gaps, query begin, query end, subject begin, subject end, e-value, bit score
    We will extract hits where ('alignment length' > minlen), and then we first sort the table on query ID, then sort the table on 'bit score' in descending order, and finally go down
    the list and keep unique 'subject ID'. Note: There is room here to include a scaffold only if having some bit score or e-value.
    """
    input:
        "run/plast/{genome}.plast.tab"
    output:
        temp("run/tmp/{genome}.scaffolds.ids")
    params:
        minlen = "50"
    shell:
        """
        awk '$4>{params.minlen}' {input} | \
        sort -t$'\t' -k1,1 -k12rg | \
        awk -F $'\t' '!x[$1]++' | \
        awk -F $'\t' '{{print $2}}' | \
        sort -u > {output}
        """

# 7. get_reference_ids
# Uses: bash 5.0.17, awk v5.0.1, sort v8.30
rule OO7_get_reference_ids:
    """
    Get IDs (file names) for those reference gene files that have a best plast hit with length above minlen.
    NOTE: Room here for more filtering if needed.
    Note: The awk step is dependent on finding the '__', which was introduced in rule convert_fas, to work.
    """
    input:
        "run/plast/{genome}.plast.tab"
    output:
        temp("run/tmp/{genome}.ref.ids")
    params:
        minlen = "50"
    shell:
        """
        awk '$4>{params.minlen}' {input} | \
        sort -t$'\t' -k1g -k12rg | \
        awk -F $'\t' '!x[$1]++' | \
        awk -F $'__' '{{print $1 ".hmm"}}' | \
        sort -u > {output}
        """
        # awk '$4>50' run/plast/Apa.plast.tab | sort -t$'\t' -k1g -k12rg | awk -F $'\t' '!x[$1]++' | awk -F $'__' '{print $1 ".hmm"}' | sort -u > run/tmp/Apa.ref.ids


# 8. select_scaffolds
# Uses: bash 5.0.17, blastdbcmd v2.9.0+
rule OO8_select_scaffolds:
    """
    Extract the scaffolds with best plast hits from the splitted genome fasta.
    """
    input:
        db = "run/plast/{genome}.split.fas",
        idfile = "run/tmp/{genome}.scaffolds.ids"
    output:
        temp("run/plast/{genome}.plast.fas")
    params:
        dbtype = "nucl",
        outfmt = "%f"
    shell:
        "blastdbcmd -db {input.db} -dbtype {params.dbtype} -entry_batch {input.idfile} -outfmt {params.outfmt} -out {output}"

# 9. fasta_to_stockholm
# Uses: bash 5.0.17, fasta2stockholm.pl
rule OO9_fasta_to_stockholm:
    """
    Fasta to Stockholm MSA conversion.
    """
    input:
        "data/references/{ref}.fas"
    output:
        temp("run/tmp/{ref}.sto")
    shell:
        "fasta2stockholm.pl {input} > {output}"

# 10. create_hmms
# Uses: bash 5.0.17, hmmbuild from HMMER 3.3
rule O10_create_hmms:
    """
    Create hmms from Stockholm format.
    """
    input:
        "run/tmp/{ref}.sto"
    output:
        temp("run/tmp/{ref}.hmm")
    shell:
        "hmmbuild --dna {output} {input}"

# 11. select_hmms
# Uses: bash 5.0.17, cat v8.30, find v4.7.0, grep v3.4
rule O11_select_hmms:
    """
    Select those hmm from tmp files that have matches in plast, and concatenate them.
    """
    input:
        refids = "run/tmp/{genome}.ref.ids",
        hmms = expand("run/tmp/{ref}.hmm", ref=REFERENCES)
    output:
        temp("run/hmmer/{genome}.hmm")
    shell:
        """
        while IFS= read -r line; do cat run/tmp/$line >> {output}; done < {input.refids}
        """
        #"cat $(echo {input.hmms} | grep -f {input.refids}) > {output}"
        #"cat $(find run/tmp -type f -name \*.hmm | grep -f {input.refids}) > {output}"

# 12. run_hmmpress
# Uses: bash 5.0.17, hmmpress from HMMER 3.3
rule O12_run_hmmpress:
    """
    Run hmmpress.
    """
    input:
        "run/hmmer/{genome}.hmm"
    output:
        temp(touch("run/tmp/{genome}.hmmpress.done"))
    shell:
        "hmmpress {input}"

# 13. run_hmmer
# Uses: bash 5.0.17, nhmmer from HMMER 3.3
rule O13_run_hmmer:
    """
    Run nhmmer: the selected scaffolds against the selected hmms.
    """
    input:
        "run/tmp/{genome}.hmmpress.done",
        hmm = "run/hmmer/{genome}.hmm",
        query = "run/plast/{genome}.plast.fas"
    output:
        temp("run/hmmer/{genome}.hmmer.out")
    params:
        notextw = "--notextw"
    threads:
        workflow.cores * 0.5
    shell:
        "nhmmer {params.notextw} --cpu {threads} --tblout {output} {input.hmm} {input.query}"

# 14. parse_hmmer
# Uses: bash 5.0.17, perl v5.30.0, parse_nhmmer.pl v1.0
rule O14_parse_hmmer:
    """
    Parse nhmmer output.
    """
    input:
        hmmer = "run/hmmer/{genome}.hmmer.out",
        fas = "run/plast/{genome}.plast.fas"
    output:
        directory("results/genomes/{genome}")
    params:
        stats = "--stats",
        prefix = "{genome}",
        fastaheader = "{genome}"
    shell:
        "perl workflow/scripts/parse_nhmmer.pl -f {params.fastaheader} -p {params.prefix} -i {input.hmmer} -g {input.fas} -d {output} {params.stats}"

# 15. gather_genes
# Uses: bash 5.0.17, perl v5.30.0, gather_genes.pl v1.0
rule O15_gather_genes:
    """
    Gather genes from parsed nhmmer output in genome folders.
    """
    input:
        expand("results/genomes/{genome}", genome=GENOMES)
    output:
        dir = directory("results/genes"),
        file = temp(touch("run/tmp/genes.done"))
    shell:
        "perl workflow/scripts/gather_genes.pl --outdir={output.dir} $(find results/genomes -type d)"

# 16. Compress hmmer.out
rule O16_compress_hmmer_out:
    """
    Compress  and keep hmmer output.
    """
    input:
        "run/hmmer/{genome}.hmmer.out"
    output:
        "results/hmmer/{genome}.hmmer.out.gz"
    threads:
        workflow.cores * 0.5
    shell:
        "pigz -p {threads} -c {input} > {output}"

# 17. Remove output, keep results
rule clean:
    """
    Remove run directory.
    """
    shell:
        "rm -rf run/"

# 18. Remove all output, including results.
rule distclean:
    """
    Remove run and results directories.
    """
    shell:
        "rm -rf run/ results/"

# 19. When finished, remove run/ when finished
onsuccess:
    """
    Remove run directory on succesful finish.
    """
    shell("rm -r run")

